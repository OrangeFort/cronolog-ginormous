diff -ur cronolog-1.6.2/src/Makefile.in cronolog-1.6.2-patched/src/Makefile.in
--- cronolog-1.6.2/src/Makefile.in	2001-05-04 02:02:03.000000000 -0700
+++ cronolog-1.6.2-patched/src/Makefile.in	2014-09-15 03:17:50.000000000 -0700
@@ -95,7 +95,7 @@
 cronolog_LDFLAGS = 
 SCRIPTS =  $(sbin_SCRIPTS)
 
-CFLAGS = @CFLAGS@
+CFLAGS = @CFLAGS@ -D_XOPEN_SOURCE
 COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
 CCLD = $(CC)
 LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@
diff -ur cronolog-1.6.2/src/cronolog.c cronolog-1.6.2-patched/src/cronolog.c
--- cronolog-1.6.2/src/cronolog.c	2001-05-03 09:42:48.000000000 -0700
+++ cronolog-1.6.2-patched/src/cronolog.c	2014-09-15 03:17:55.000000000 -0700
@@ -6,7 +6,7 @@
  * are met:
  *
  * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer. 
+ *    notice, this list of conditions and the following disclaimer.
  *
  * 2. Redistributions in binary form must reproduce the above copyright
  *    notice, this list of conditions and the following disclaimer in
@@ -82,6 +82,18 @@
  * written to "file" (e.g. /dev/console) or to stderr if "file" is "-".
  */
 
+#ifndef _WIN32
+#define _GNU_SOURCE 1
+#define OPEN_EXCLUSIVE O_WRONLY|O_CREAT|O_EXCL|O_APPEND|O_LARGEFILE
+#define OPEN_SHARED O_WRONLY|O_CREAT|O_APPEND|O_LARGEFILE
+#else
+#define OPEN_EXCLUSIVE O_WRONLY|O_CREAT|O_EXCL|O_APPEND
+#define OPEN_SHARED O_WRONLY|O_CREAT|O_APPEND
+#endif
+
+#include <sys/types.h>
+#include <sys/wait.h>
+#include <signal.h>
 #include "cronoutils.h"
 #include "getopt.h"
 
@@ -91,6 +103,16 @@
 int	new_log_file(const char *, const char *, mode_t, const char *,
 		     PERIODICITY, int, int, char *, size_t, time_t, time_t *);
 
+void	cleanup(int );
+void	handle_file();
+void	fork_to_handle_file();
+
+int     openwrapper( const char *filename );
+
+#ifndef _WIN32
+void    setsig_handler( int signum,  void (*action)(int, siginfo_t *, void *));
+void    set_signal_handlers();
+#endif
 
 /* Definition of version and usage messages */
 
@@ -100,6 +122,13 @@
 #define VERSION_MSG      "cronolog version 0.1\n"
 #endif
 
+#ifndef _WIN32
+#define SETUGID_USAGE	"   -u USER,   --set-uid=USER  change to USER before doing anything (name or UID)\n" \
+			"   -g GROUP,  --set-gid=GROUP change to GROUP before doing anything (name or GID)\n" \
+			"   -U OCTAL,  --umask=OCTAL   sets umask of file/directory creation\n"
+#else
+#define SETUGID_USAGE	""
+#endif
 
 #define USAGE_MSG 	"usage: %s [OPTIONS] logfile-spec\n" \
 			"\n" \
@@ -113,6 +142,11 @@
 			"   -o,        --once-only     create single output log from template (not rotated)\n" \
 			"   -x FILE,   --debug=FILE    write debug messages to FILE\n" \
 			"                              ( or to standard error if FILE is \"-\")\n" \
+			"   -r,        --helper=SCRIPT post rotation helper script to fork exec on old files\n" \
+			"                              ( will be called like \"SCRIPT <oldlog>\" )\n" \
+			"                              ( not tested on windows )\n" \
+			"   -G,        --helper-arg=ARG argument passed to rotation helper script\n" \
+            SETUGID_USAGE \
 			"   -a,        --american         American date formats\n" \
 			"   -e,        --european         European date formats (default)\n" \
 			"   -s,    --start-time=TIME   starting time\n" \
@@ -122,7 +156,7 @@
 
 /* Definition of the short and long program options */
 
-char          *short_options = "ad:eop:s:z:H:P:S:l:hVx:";
+char          *short_options = "ad:eop:s:z:H:P:S:l:hVx:r:G:u:g:U:";
 
 #ifndef _WIN32
 struct option long_options[] =
@@ -137,12 +171,30 @@
     { "link",      	required_argument, 	NULL, 'l' },
     { "period",		required_argument,	NULL, 'p' },
     { "delay",		required_argument,	NULL, 'd' },
+    { "helper",		required_argument,	NULL, 'r' },
+    { "helper-arg",	required_argument,	NULL, 'G' },
+    { "set-uid",    required_argument,  NULL, 'u' },
+    { "set-gid",    required_argument,  NULL, 'g' },
     { "once-only", 	no_argument,       	NULL, 'o' },
     { "help",      	no_argument,       	NULL, 'h' },
-    { "version",   	no_argument,       	NULL, 'V' }
+    { "version",   	no_argument,       	NULL, 'V' },
+    { "umask",       required_argument,  NULL, 'U' },
+    { NULL,    0,      NULL, 0 }
 };
 #endif
 
+#ifndef _WIN32
+static mode_t saved_umask = 0;
+static mode_t new_umask = 0;
+#endif
+
+static    char	handler[MAX_PATH];
+static    char	handler_arg[MAX_PATH];
+static    char	filename[MAX_PATH];
+static    int   use_handler =0;
+static    int   use_handler_arg =0;
+static    int   i_am_handler =0;
+
 /* Main function.
  */
 int
@@ -155,11 +207,16 @@
     int		use_american_date_formats = 0;
     char 	read_buf[BUFSIZE];
     char 	tzbuf[BUFSIZE];
-    char	filename[MAX_PATH];
     char	*start_time = NULL;
     char	*template;
     char	*linkname = NULL;
     char	*prevlinkname = NULL;
+#ifndef _WIN32
+    uid_t	new_uid = 0;
+    gid_t	new_gid = 0;
+    int		change_uid = 0;
+    int		change_gid = 0;
+#endif
     mode_t	linktype = 0;
     int 	n_bytes_read;
     int		ch;
@@ -168,22 +225,31 @@
     time_t	next_period = 0;
     int 	log_fd = -1;
 
+    memset( handler, '\0', MAX_PATH );
+    memset( handler_arg, '\0', MAX_PATH );
+    memset( filename, '\0', MAX_PATH );
+
+#ifndef _WIN32
+    new_umask=umask(0);
+    umask(new_umask);
+#endif
+
 #ifndef _WIN32
     while ((ch = getopt_long(argc, argv, short_options, long_options, NULL)) != EOF)
 #else
     while ((ch = getopt(argc, argv, short_options)) != EOF)
-#endif        
+#endif
     {
 	switch (ch)
 	{
 	case 'a':
 	    use_american_date_formats = 1;
 	    break;
-	    
+
 	case 'e':
 	    use_american_date_formats = 0;
 	    break;
-	    
+
 	case 's':
 	    start_time = optarg;
 	    break;
@@ -203,9 +269,9 @@
 	    linkname = optarg;
 #ifndef _WIN32
 	    linktype = S_IFLNK;
-#endif        
+#endif
 	    break;
-	    
+
 	case 'P':
 	    if (linkname == NULL)
 	    {
@@ -214,7 +280,7 @@
 	    }
 	    prevlinkname = optarg;
 	    break;
-	    
+
 
 	case 'd':
 	    period_delay_units = parse_timespec(optarg, &period_delay);
@@ -231,13 +297,26 @@
 		|| (periodicity == MONTHLY)    && (12 % period_multiple)) {
 		fprintf(stderr, "%s: invalid explicit period specification (%s)\n", argv[0], start_time);
 		exit(1);
-	    }		
+	    }
 	    break;
-	    
+
+#ifndef _WIN32
+	case 'u':
+	    new_uid = parse_uid(optarg, argv[0]);
+	    change_uid = 1;
+	    break;
+	case 'g':
+	    new_gid = parse_gid(optarg, argv[0]);
+	    change_gid = 1;
+	    break;
+	case 'U':
+	  new_umask = (mode_t)strtol(optarg, NULL, 8);
+	  break;
+#endif
 	case 'o':
 	    periodicity = ONCE_ONLY;
 	    break;
-	    
+
 	case 'x':
 	    if (strcmp(optarg, "-") == 0)
 	    {
@@ -248,11 +327,19 @@
 		debug_file = fopen(optarg, "a+");
 	    }
 	    break;
-	    
+	case 'r':
+            strncat(handler, optarg, MAX_PATH );
+            use_handler=1;
+            break;
+	case 'G':
+            strncat(handler_arg, optarg, MAX_PATH );
+            use_handler_arg=1;
+            break;
+
 	case 'V':
 	    fprintf(stderr, VERSION_MSG);
 	    exit(0);
-	    
+
 	case 'h':
 	case '?':
 	    fprintf(stderr, USAGE_MSG, argv[0]);
@@ -266,6 +353,17 @@
 	exit(1);
     }
 
+#ifndef _WIN32
+    if (change_gid && setgid(new_gid) == -1) {
+	fprintf(stderr, "setgid: unable to change to gid: %d\n", new_gid);
+       	exit(1);
+    }
+    if (change_uid && setuid(new_uid) == -1) {
+	fprintf(stderr, "setuid: unable to change to uid: %d\n", new_uid);
+       	exit(1);
+    }
+#endif
+
     DEBUG((VERSION_MSG "\n"));
 
     if (start_time)
@@ -283,7 +381,7 @@
     /* The template should be the only argument.
      * Unless the -o option was specified, determine the periodicity.
      */
-    
+
     template = argv[optind];
     if (periodicity == UNKNOWN)
     {
@@ -299,13 +397,17 @@
 		&& abs(period_delay)  >= period_multiple)) {
 	    fprintf(stderr, "%s: period delay cannot be larger than the rollover period\n", argv[0], start_time);
 	    exit(1);
-	}		
+	}
 	period_delay *= period_seconds[period_delay_units];
     }
 
     DEBUG(("Rotation period is per %d %s\n", period_multiple, periods[periodicity]));
 
 
+#ifndef _WIN32
+    set_signal_handlers();
+#endif
+
     /* Loop, waiting for data on standard input */
 
     for (;;)
@@ -316,19 +418,21 @@
 	n_bytes_read = read(0, read_buf, sizeof read_buf);
 	if (n_bytes_read == 0)
 	{
-	    exit(3);
+	    cleanup(3);
 	}
 	if (errno == EINTR)
 	{
-	    continue;
+	    /*
+             * fall through, it may have been alarm, in which case it will be time to rotate.
+             * */
 	}
 	else if (n_bytes_read < 0)
 	{
-	    exit(4);
+	    cleanup(4);
 	}
 
 	time_now = time(NULL) + time_offset;
-	
+
 	/* If the current period has finished and there is a log file
 	 * open, close the log file
 	 */
@@ -336,8 +440,9 @@
 	{
 	    close(log_fd);
 	    log_fd = -1;
+            fork_to_handle_file();
 	}
-	
+
 	/* If there is no log file open then open a new one.
 	 */
 	if (log_fd < 0)
@@ -345,19 +450,20 @@
 	    log_fd = new_log_file(template, linkname, linktype, prevlinkname,
 				  periodicity, period_multiple, period_delay,
 				  filename, sizeof (filename), time_now, &next_period);
+            alarm( next_period - time_now );
 	}
 
 	DEBUG(("%s (%d): wrote message; next period starts at %s (%d) in %d secs\n",
-	       timestamp(time_now), time_now, 
+	       timestamp(time_now), time_now,
 	       timestamp(next_period), next_period,
 	       next_period - time_now));
 
 	/* Write out the log data to the current log file.
 	 */
-	if (write(log_fd, read_buf, n_bytes_read) != n_bytes_read)
+	if (n_bytes_read && write(log_fd, read_buf, n_bytes_read) != n_bytes_read)
 	{
 	    perror(filename);
-	    exit(5);
+	    cleanup(5);
 	}
     }
 
@@ -382,27 +488,31 @@
     time_t 	start_of_period;
     struct tm 	*tm;
     int 	log_fd;
+#ifndef _WIN32
+    saved_umask=umask(new_umask);
+#endif
+
 
     start_of_period = start_of_this_period(time_now, periodicity, period_multiple);
     tm = localtime(&start_of_period);
     strftime(pfilename, BUFSIZE, template, tm);
     *pnext_period = start_of_next_period(start_of_period, periodicity, period_multiple) + period_delay;
-    
+
     DEBUG(("%s (%d): using log file \"%s\" from %s (%d) until %s (%d) (for %d secs)\n",
-	   timestamp(time_now), time_now, pfilename, 
+	   timestamp(time_now), time_now, pfilename,
            timestamp(start_of_period), start_of_period,
 	   timestamp(*pnext_period), *pnext_period,
 	   *pnext_period - time_now));
-    
-    log_fd = open(pfilename, O_WRONLY|O_CREAT|O_APPEND, FILE_MODE);
-    
+
+    log_fd = openwrapper(pfilename);
+
 #ifndef DONT_CREATE_SUBDIRS
     if ((log_fd < 0) && (errno == ENOENT))
     {
 	create_subdirs(pfilename);
-	log_fd = open(pfilename, O_WRONLY|O_CREAT|O_APPEND, FILE_MODE);
+	log_fd = openwrapper(pfilename);
     }
-#endif	    
+#endif
 
     if (log_fd < 0)
     {
@@ -410,9 +520,189 @@
 	exit(2);
     }
 
+#ifndef _WIN32
+    umask(saved_umask);
+#endif
+
     if (linkname)
     {
 	create_link(pfilename, linkname, linktype, prevlinkname);
     }
     return log_fd;
 }
+
+/*
+ * fork, then exec an external handler to deal with rotated file.
+ */
+void
+fork_to_handle_file()
+{
+    int fk ;
+    static int childpid=0;
+
+    if( ! use_handler || !i_am_handler || handler[0] =='\0' || filename[0] == '\0' )
+    {
+        return;
+    }
+    fk=fork();
+    if( fk < 0 )
+    {
+        perror("couldnt fork");
+        exit(2);
+    }else if( fk > 0 )
+    {
+        if( childpid )
+        {
+            /*
+             * collect zombies. run twice, in case one or more children took longer than
+             * the rotation period for a while, this will eventually clean them up.
+             * Of course, if handler children take longer than rotation period to handle
+             * things, you will eventually have a big problem.
+             *
+             * */
+            (void) waitpid( 0, NULL, WNOHANG | WUNTRACED );
+            (void) waitpid( 0, NULL, WNOHANG | WUNTRACED );
+        }
+        childpid=fk;
+        return; /* parent */
+    }
+    /* child */
+    /* dont muck with stdin or out of parent, but allow stderr to be commingled */
+    close(0);
+    close(1);
+    handle_file();
+}
+
+/*
+ * exec an external handler to deal with rotated file.
+ */
+void
+handle_file()
+{
+    char **exec_argv ;
+    if( ! use_handler || !i_am_handler || handler[0] =='\0' || filename[0] == '\0' )
+    {
+        return;
+    }
+    if ( use_handler_arg == 0 )
+    {
+        exec_argv = malloc( sizeof( char *)*3);
+        exec_argv[0] = strdup( handler );
+        exec_argv[1] = strdup( filename );
+        exec_argv[2] = NULL;
+    }else
+    {
+        exec_argv = malloc( sizeof( char *)*4);
+        exec_argv[0] = strdup( handler );
+        exec_argv[1] = strdup( handler_arg );
+        exec_argv[2] = strdup( filename );
+        exec_argv[3] = NULL ;
+    }
+    execvp( exec_argv[0], exec_argv );
+    perror("cant execvp");
+    exit(2);
+}
+
+
+
+#ifndef _WIN32
+/*
+ * wrapper to be called as signal handler.
+ */
+void
+handle_file_on_sig( int sig, siginfo_t *si, void *v )
+{
+    handle_file();
+    /* not reached */
+    exit( 3 );
+};
+
+/*
+ * wrapper to be called for alarm signal
+ */
+void
+alarm_signal_handler( int sig, siginfo_t *si, void *v )
+{
+        ;
+        /*
+         * do nothing; the key thing is that the alarm will cause the read()
+         * to fail with errno=EINTR. this empty handler is required, because the
+         * default handler will exit(1)
+         *
+         */
+};
+
+void
+set_signal_handlers()
+{
+    /*
+     * all signals which usually kill a process that can be caught are
+     * set to handle_file when received. This will make apache shutdowns more
+     * graceful even if use_handler is false.
+     */
+    setsig_handler( SIGHUP, handle_file_on_sig );
+    setsig_handler( SIGINT, handle_file_on_sig );
+    setsig_handler( SIGQUIT, handle_file_on_sig );
+    setsig_handler( SIGILL, handle_file_on_sig );
+    setsig_handler( SIGABRT, handle_file_on_sig );
+    setsig_handler( SIGBUS, handle_file_on_sig );
+    setsig_handler( SIGFPE, handle_file_on_sig );
+    setsig_handler( SIGPIPE, handle_file_on_sig );
+    setsig_handler( SIGTERM, handle_file_on_sig );
+    setsig_handler( SIGUSR1, handle_file_on_sig );
+
+    /* sigalrm is used to break out of read() when it is time to rotate the log. */
+    setsig_handler( SIGALRM, alarm_signal_handler );
+}
+
+void
+setsig_handler( int signum,  void (*action)(int, siginfo_t *, void *))
+{
+    struct sigaction siga ;
+    memset( &siga, '\0', sizeof( struct sigaction ));
+    siga.sa_sigaction= action ;
+    siga.sa_flags = SA_SIGINFO ;
+    if( -1== sigaction( signum, &siga, NULL ))
+    {
+        perror( "cant set sigaction" );
+    }
+}
+#endif
+
+
+/*
+ * cleanup
+ */
+void
+cleanup( int exit_status )
+{
+    handle_file();
+    exit(exit_status);
+}
+
+/*
+ * only the first cronolog process to open a particular file is responsible
+ * for starting the cleanup process later. This wrapper sets i_am_handler
+ * according to that logic.
+ * */
+int
+openwrapper( const char *ofilename )
+{
+    int ret;
+    if( use_handler !=1 )
+    {
+        return open(ofilename, OPEN_SHARED, S_IRWXU );
+    }
+    ret = open(ofilename, OPEN_EXCLUSIVE, S_IRWXU );
+    if( ret < 0 )
+    {
+        ret = open(ofilename, OPEN_SHARED, S_IRWXU );
+        i_am_handler= 0;
+    }
+    else
+    {
+        i_am_handler=1;
+    }
+    return ret;
+}
+
diff -ur cronolog-1.6.2/src/cronotest.c cronolog-1.6.2-patched/src/cronotest.c
--- cronolog-1.6.2/src/cronotest.c	2001-05-03 09:26:44.000000000 -0700
+++ cronolog-1.6.2-patched/src/cronotest.c	2014-09-15 03:17:55.000000000 -0700
@@ -112,7 +112,8 @@
     { "test-subdirs",	required_argument,	NULL, 'D' },
     { "help",       	no_argument,		NULL, 'h' },
     { "version",	no_argument,		NULL, 'V' },
-    { "verbose",	no_argument,		NULL, 'v' }
+    { "verbose",	no_argument,		NULL, 'v' },
+    { NULL,		0,			NULL, 0 }
 };
 
 
diff -ur cronolog-1.6.2/src/cronoutils.c cronolog-1.6.2-patched/src/cronoutils.c
--- cronolog-1.6.2/src/cronoutils.c	2001-05-03 09:43:21.000000000 -0700
+++ cronolog-1.6.2-patched/src/cronoutils.c	2014-09-15 03:13:43.000000000 -0700
@@ -195,11 +195,11 @@
 {
     struct stat		stat_buf;
     
-    if (stat(prevlinkname, &stat_buf) == 0)
+    if (lstat(prevlinkname, &stat_buf) == 0)
     {
 	unlink(prevlinkname);
     }
-    if (stat(linkname, &stat_buf) == 0)
+    if (lstat(linkname, &stat_buf) == 0)
     {
 	if (prevlinkname) {
 	    rename(linkname, prevlinkname);
@@ -710,4 +710,50 @@
     return retval;
 }
 
-    
+
+#ifndef _WIN32
+/* Turn a string specifying either a username or UID into an actual
+ * uid_t for use in setuid(). A string is assumed to be a UID if
+ * it contains only decimal digits. */
+uid_t
+parse_uid(char *user, char *argv0)
+{
+    char		*probe = user;
+    struct passwd	*ent;
+
+    while (*probe && isdigit(*probe)) {
+	probe++;
+    }
+    if (!(*probe)) {
+	return atoi(user);
+    }
+    if (!(ent = getpwnam(user))) {
+	fprintf(stderr, "%s: Bad username %s\n", argv0, user);
+	exit(1);
+    }
+    return (ent->pw_uid);
+}
+
+
+/* Turn a string specifying either a group name or GID into an actual
+ * gid_t for use in setgid(). A string is assumed to be a GID if
+ * it contains only decimal digits. */
+gid_t
+parse_gid(char *group, char *argv0)
+{
+    char		*probe = group;
+    struct group	*ent;
+
+    while (*probe && isdigit(*probe)) {
+	probe++;
+    }
+    if (!(*probe)) {
+	return atoi(group);
+    }
+    if (!(ent = getgrnam(group))) {
+	fprintf(stderr, "%s: Bad group name %s\n", argv0, group);
+	exit(1);
+    }
+    return (ent->gr_gid);
+}
+#endif /* _WIN32 */
diff -ur cronolog-1.6.2/src/cronoutils.h cronolog-1.6.2-patched/src/cronoutils.h
--- cronolog-1.6.2/src/cronoutils.h	2001-05-03 09:40:12.000000000 -0700
+++ cronolog-1.6.2-patched/src/cronoutils.h	2014-09-15 03:13:43.000000000 -0700
@@ -84,6 +84,8 @@
 #include <limits.h>
 #ifndef _WIN32
 #include <unistd.h>
+#include <pwd.h>
+#include <grp.h>
 #else
 #include <io.h>
 #include <direct.h>
@@ -172,7 +174,8 @@
 void		print_debug_msg(char *msg, ...);
 time_t		parse_time(char *time_str, int);
 char 		*timestamp(time_t thetime);
-
+uid_t		parse_uid(char *user, char *argv0);
+gid_t		parse_gid(char *group, char *argv0);
 
 /* Global variables */
 
Only in cronolog-1.6.2-patched/src: zip_send_rm.sh
